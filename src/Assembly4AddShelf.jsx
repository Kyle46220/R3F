/*
auto-generated by: https://github.com/react-spring/gltfjsx
*/

import * as THREE from 'three';
import React, { useRef, useState } from 'react';
import { useLoader } from '@react-three/fiber';
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';
import { useSnapshot, proxy } from 'valtio';
import store from './store';

export default function AddShelfModel(props) {
	const shelfNumber = props.shelfNumber;
	const { nodes, materials } = useLoader(GLTFLoader, '/Assembly4.gltf');
	const snap = useSnapshot(store);

	const handlePointerOver = (e) => {
		e.stopPropagation();
		const name = e.object.name;
		// can i use a ref instead of the shelf number? OR MAYbeE ITS THE CURRENT??

		return (store.items.addedShelfModels[`shelf${shelfNumber}`][
			name
		].hover = true);
	};

	const handlePointerOut = (e) => {
		e.stopPropagation();
		const name = e.object.name;

		return (store.items.addedShelfModels[`shelf${shelfNumber}`][
			name
		].hover = false);
	};
	const handleClick = (e) => {
		//this function will put the clicked thing into the store object. in its right category
		e.stopPropagation();
		const name = e.object.name; // here is where i am using the name which they have in common to shoose where to save the position

		const center = new THREE.Vector3();

		return (store.items.addedShelfModels[`shelf${shelfNumber}`][
			name
		].position = e.object.geometry.boundingBox.getCenter(center));
	};

	const group = useRef();

	return (
		<group
			ref={group}
			{...props}
			// position-z={-295 * snap.transforms.scale.y}
			scale-x={snap.transforms.scale.x}
			scale-z={1}
		>
			<mesh
				material={nodes.Solid1.material}
				geometry={nodes.Solid1.geometry}
			></mesh>
			<mesh
				material={nodes.Solid52.material}
				geometry={nodes.Solid52.geometry}
			/>
			<mesh
				name={nodes.Solid11_1.name}
				material={nodes.Solid11_1.material}
				geometry={nodes.Solid11_1.geometry}
				// onPointerOver={(e) => handlePointerOver(e)}
				// onPointerOut={(e) => handlePointerOut(e)}
				onClick={(e) => handleClick(e)}
			>
				<meshStandardMaterial
					attach="material"
					color={'blue'}
					transparent={true}
					// opacity={
					// 	snap.items.addedShelfModels[`shelf${shelfNumber}`]
					// 		.Solid11_1
					// 		? 0.5
					// 		: 0
					// }
				/>
			</mesh>
			<mesh
				name={nodes.Solid12.name}
				material={nodes.Solid12.material}
				geometry={nodes.Solid12.geometry}
			></mesh>

			<mesh
				name={nodes.Solid41.name}
				material={nodes.Solid41.material}
				geometry={nodes.Solid41.geometry}
			></mesh>

			<mesh
				name={nodes.Solid112.name}
				material={nodes.Solid112.material}
				geometry={nodes.Solid112.geometry}
			/>

			<mesh
				name={nodes.Solid6.name}
				material={nodes.Solid6.material}
				geometry={nodes.Solid6.geometry}
				// onPointerOver={(e) => handlePointerOver(e)}
				// onPointerOut={(e) => handlePointerOut(e)}
				onClick={(e) => handleClick(e)}
			>
				<meshStandardMaterial
					attach="material"
					color={'blue'}
					transparent={true}
					// opacity={
					// 	snap.items.addedShelfModels[`shelf${shelfNumber}`]
					// 		.Solid6
					// 		? 0.5
					// 		: 0
					// }
				/>
			</mesh>
		</group>
	);
}
