/*
auto-generated by: https://github.com/react-spring/gltfjsx
*/

import * as THREE from 'three';
import React, { useRef, useState } from 'react';
import { useLoader } from '@react-three/fiber';
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';
// import { Controls, useControl } from 'react-three-gui';
import { useSnapshot, proxy } from 'valtio';
import { useStore } from './zusStore';
import DrawerModel from './DrawerGLTFJSX';
import store from './store';

// const state = proxy({
// 	current: null,
// 	items: {},
// });

export default function Model(props) {
	// const state = useStore();
	const snap = useSnapshot(store);
	const { nodes, materials } = useLoader(GLTFLoader, '/Assembly4.gltf');

	const handlePointerOver = (e) => {
		e.stopPropagation();
		const array = Object.entries(nodes);
		const result = array.filter((node) => node[1].name == e.object.name);

		const name = result[0][0];

		return (store.items.mainShelves[name].hover = true);
	};

	const handlePointerOut = (e) => {
		e.stopPropagation();
		const array = Object.entries(nodes);
		const result = array.filter((node) => node[1].name == e.object.name);
		const name = result[0][0];

		return (store.items.mainShelves[name].hover = false);
	};

	const handleClick = (e) => {
		//this function will put the clicked thing into the state object. in its right category
		e.stopPropagation();

		const array = Object.entries(nodes);
		const result = array.filter((node) => node[1].name == e.object.name);
		const name = result[0][0];
		const center = new THREE.Vector3();
		console.log(store.items, name);
		return (store.items.mainShelves[
			name
		].position = e.object.geometry.boundingBox.getCenter(center));
	};

	const group = useRef();

	const [hover, setHover] = useState(false);
	const [click, setClick] = useState(false);

	return (
		<group
			ref={group}
			{...props}
			dispose={null}

			// position-x={posX * 500}
			// 	scale-x={1}
			// 	scale-y={1}
			//   scale-z={1}
			// scale={(1, 1, 1)}
		>
			<mesh
				name={nodes.Solid1.name}
				material={nodes.Solid1.material}
				geometry={nodes.Solid1.geometry}
			></mesh>

			<mesh
				material={nodes.Solid2.material}
				geometry={nodes.Solid2.geometry}
			></mesh>
			<mesh
				material={nodes.Solid3.material}
				geometry={nodes.Solid3.geometry}
			></mesh>
			<mesh
				material={nodes.Solid4.material}
				geometry={nodes.Solid4.geometry}
			></mesh>
			<mesh
				material={nodes.Solid5.material}
				geometry={nodes.Solid5.geometry}
			></mesh>
			<mesh
				name={nodes.Solid11_1.name}
				material={nodes.Solid11_1.material}
				geometry={nodes.Solid11_1.geometry}
				onPointerOver={(e) => handlePointerOver(e)}
				onPointerOut={(e) => handlePointerOut(e)}
				onClick={(e) => handleClick(e)}
			>
				<meshStandardMaterial
					attach="material"
					color={hover ? 'pink' : 'blue'}
					transparent={true}
					opacity={store.items.mainShelves.Solid11_1.hover ? 0.5 : 0}
				/>
			</mesh>
			<mesh
				material={nodes.Solid12.material}
				geometry={nodes.Solid12.geometry}
			></mesh>
			<mesh
				material={nodes.Solid13.material}
				geometry={nodes.Solid13.geometry}
			></mesh>
			<mesh
				material={nodes.Solid21.material}
				geometry={nodes.Solid21.geometry}
			></mesh>
			<mesh
				material={nodes.Solid31.material}
				geometry={nodes.Solid31.geometry}
			></mesh>
			<mesh
				material={nodes.Solid41.material}
				geometry={nodes.Solid41.geometry}
			></mesh>
			<mesh
				material={nodes.Solid51.material}
				geometry={nodes.Solid51.geometry}
			></mesh>
			<mesh
				material={nodes.Solid14.material}
				geometry={nodes.Solid14.geometry}
			></mesh>
			<mesh
				material={nodes.Solid15.material}
				geometry={nodes.Solid15.geometry}
			></mesh>
			<mesh
				material={nodes.Solid16.material}
				geometry={nodes.Solid16.geometry}
			/>
			<mesh
				material={nodes.Solid17.material}
				geometry={nodes.Solid17.geometry}
			/>
			<mesh
				material={nodes.Solid18.material}
				geometry={nodes.Solid18.geometry}
			></mesh>
			<mesh
				material={nodes.Solid22.material}
				geometry={nodes.Solid22.geometry}
			></mesh>
			<mesh
				material={nodes.Solid32.material}
				geometry={nodes.Solid32.geometry}
			></mesh>
			<mesh
				material={nodes.Solid42.material}
				geometry={nodes.Solid42.geometry}
			></mesh>
			<mesh
				material={nodes.Solid52.material}
				geometry={nodes.Solid52.geometry}
			/>
			<mesh
				material={nodes.Solid19.material}
				geometry={nodes.Solid19.geometry}
			></mesh>
			<mesh
				material={nodes.Solid110.material}
				geometry={nodes.Solid110.geometry}
			></mesh>
			<mesh
				material={nodes.Solid111.material}
				geometry={nodes.Solid111.geometry}
			></mesh>
			<mesh
				material={nodes.Solid112.material}
				geometry={nodes.Solid112.geometry}
			/>
			<mesh
				material={nodes.Solid113.material}
				geometry={nodes.Solid113.geometry}
			/>
			<mesh
				name={nodes.Solid23.name}
				material={nodes.Solid23.material}
				geometry={nodes.Solid23.geometry}
				onPointerOver={(e) => handlePointerOver(e)}
				onPointerOut={(e) => handlePointerOut(e)}
				onClick={(e) => handleClick(e)}
			>
				<meshStandardMaterial
					attach="material"
					color={hover ? 'pink' : 'blue'}
					transparent={true}
					opacity={store.items.mainShelves.Solid23.hover ? 1 : 0}
				/>
			</mesh>
			<mesh
				name={nodes.Solid33.name}
				material={nodes.Solid33.material}
				geometry={nodes.Solid33.geometry}
				onPointerOver={(e) => handlePointerOver(e)}
				onPointerOut={(e) => handlePointerOut(e)}
				onClick={(e) => handleClick(e)}
			>
				<meshStandardMaterial
					attach="material"
					color={hover ? 'pink' : 'blue'}
					transparent={true}
					opacity={store.items.mainShelves.Solid33.hover ? 0.5 : 0}
				/>
			</mesh>
			<mesh
				name={nodes.Solid43.name}
				material={nodes.Solid43.material}
				geometry={nodes.Solid43.geometry}
				onPointerOver={(e) => handlePointerOver(e)}
				onPointerOut={(e) => handlePointerOut(e)}
				onClick={(e) => handleClick(e)}
			>
				<meshStandardMaterial
					attach="material"
					color={hover ? 'pink' : 'blue'}
					transparent={true}
					opacity={store.items.mainShelves.Solid43.hover ? 0.5 : 0}
				/>
			</mesh>
			<mesh
				name={nodes.Solid53.name}
				material={nodes.Solid53.material}
				geometry={nodes.Solid53.geometry}
				onPointerOver={(e) => handlePointerOver(e)}
				onPointerOut={(e) => handlePointerOut(e)}
				onClick={(e) => handleClick(e)}
			>
				<meshStandardMaterial
					attach="material"
					color={hover ? 'pink' : 'blue'}
					transparent={true}
					opacity={store.items.mainShelves.Solid53.hover ? 0.5 : 0}
				/>
			</mesh>
			<mesh
				name={nodes.Solid6.name}
				material={nodes.Solid6.material}
				geometry={nodes.Solid6.geometry}
				onPointerOver={(e) => handlePointerOver(e)}
				onPointerOut={(e) => handlePointerOut(e)}
				onClick={(e) => handleClick(e)}
			>
				<meshStandardMaterial
					attach="material"
					color={hover ? 'pink' : 'blue'}
					transparent={true}
					opacity={store.items.mainShelves.Solid6.hover ? 0.5 : 0}
				/>
			</mesh>
			<mesh
				name={nodes.Solid7.name}
				material={nodes.Solid7.material}
				geometry={nodes.Solid7.geometry}
				onPointerOver={(e) => handlePointerOver(e)}
				onPointerOut={(e) => handlePointerOut(e)}
				onClick={(e) => handleClick(e)}
			>
				<meshStandardMaterial
					attach="material"
					color={hover ? 'pink' : 'blue'}
					transparent={true}
					opacity={store.items.mainShelves.Solid7.hover ? 0.5 : 0}
				/>
			</mesh>
			<mesh
				name={nodes.Solid8.name}
				material={nodes.Solid8.material}
				geometry={nodes.Solid8.geometry}
				onPointerOver={(e) => handlePointerOver(e)}
				onPointerOut={(e) => handlePointerOut(e)}
				onClick={(e) => handleClick(e)}
			>
				<meshStandardMaterial
					attach="material"
					color={hover ? 'pink' : 'blue'}
					transparent={true}
					opacity={store.items.mainShelves.Solid8.hover ? 0.5 : 0}
				/>
			</mesh>
			<mesh
				name={nodes.Solid9.name}
				material={nodes.Solid9.material}
				geometry={nodes.Solid9.geometry}
				onPointerOver={(e) => handlePointerOver(e)}
				onPointerOut={(e) => handlePointerOut(e)}
				onClick={(e) => handleClick(e)}
			>
				<meshStandardMaterial
					attach="material"
					color={hover ? 'pink' : 'blue'}
					transparent={true}
					opacity={store.items.mainShelves.Solid9.hover ? 0.5 : 0}
				/>
			</mesh>
			<mesh
				name={nodes.Solid10.name}
				material={nodes.Solid10.material}
				geometry={nodes.Solid10.geometry}
				onPointerOver={(e) => handlePointerOver(e)}
				onPointerOut={(e) => handlePointerOut(e)}
				onClick={(e) => handleClick(e)}
			>
				<meshStandardMaterial
					attach="material"
					color={hover ? 'pink' : 'blue'}
					transparent={true}
					opacity={store.items.mainShelves.Solid10.hover ? 1 : 0}
				/>
			</mesh>
			<mesh
				material={nodes.Solid11.material}
				geometry={nodes.Solid11.geometry}
			>
				<meshStandardMaterial
					attach="material"
					color={hover ? 'pink' : 'blue'}
					// transparent={true}
					// opacity={store.items.Solid10.hover ? 1 : 0}
				/>
			</mesh>
		</group>
	);
}
