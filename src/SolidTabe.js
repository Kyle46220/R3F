/*
auto-generated by: https://github.com/react-spring/gltfjsx
*/

import * as THREE from 'three';
import React, { useRef, useEffect, useState, useMemo } from 'react';
import { useLoader } from 'react-three-fiber';
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';
import { TextureLoader } from 'three/src/loaders/TextureLoader';
import { useTexture } from '@react-three/drei';

import { useSnapshot } from 'valtio';
import store from './store';
import { Controls, useControl, withControls } from 'react-three-gui';
import {
	MeshBasicMaterial,
	MeshStandardMaterial,
	MeshPhongMaterial,
} from 'three';

export default function Model(props) {
	console.log('component Mount');
	const snap = useSnapshot(store);
	const group = useRef();
	const baseBoardRef = useRef();

	const { nodes, materials } = useLoader(GLTFLoader, '/SolidTabe6.gltf');
	// const [
	// 	colourMap,
	// 	displacementMap,
	// 	normalMap,
	// 	roughnessMap,
	// 	aoMap,
	// ] = useTexture([
	// 	'/textures/Wood_007_COLOR.jpg',
	// 	'/textures/Wood_007_DISP.png',
	// 	'/textures/Wood_007_NORM.jpg',
	// 	'/textures/Wood_007_ROUGH.jpg',
	// 	'/textures/Wood_007_OCC.jpg',
	// ]);

	const [colourMap, displacementMap, normalMap, roughnessMap] = useTexture([
		'./Wood051_1K_Color.jpg',
		'./Wood051_1K_Displacement.jpg',
		'./Wood051_1K_Normal.jpg',
		'./Wood051_1K_Roughness.jpg',
	]);
	const [cover, setCover] = useState(false);
	console.log(colourMap, displacementMap, normalMap, roughnessMap);

	const legMaterial = useMemo(
		() =>
			new MeshStandardMaterial({ color: snap.modelFactors.steelColour }),
		[snap.modelFactors.steelColour]
	);
	const cupMaterial = useMemo(
		() => new MeshPhongMaterial({ color: ' grey' }),
		[snap.modelFactors.steelColour]
	);
	// const timberMaterial = new MeshStandardMaterial({
	// 	color: snap.modelFactors.timberColour,
	// });

	const {
		getPos,
		getScaleWithOffset,
		getScale,
		getEdge,
		getPosOffset,
	} = snap.functions;
	const { scale, borderScale } = snap.transforms;
	const {
		topper,
		legs,
		table,
		TopSetF2: { z: borderWidth },
		TopSetF2,
		TopSetL2,
		LegFL,
		InnerF,
		InnerL,
		cups,
		matColour,
	} = snap.modelFactors;

	const timberMaterial = useMemo(
		() =>
			new MeshStandardMaterial({
				map: colourMap,
				displacementMap: displacementMap,
				roughnessMap: roughnessMap,
				normalMap: normalMap,

				color: matColour,
			}),
		[matColour]
	);

	const matMaterial = useMemo(
		() =>
			new MeshStandardMaterial({
				color: matColour,
			}),
		[matColour]
	);
	useEffect(() => {
		// getNames(nodes);
		// group.current.castShadow = true;
		// group.current.receiveShadow = true;
		// baseBoardRef.current.geometry.attributes.uv.normalized = true;

		console.log(nodes.BaseBoard);
	}, []);

	useEffect(() => {}, [snap.transforms]);
	return (
		<group ref={group} {...props} dispose={null}>
			<group name={'Front'}>
				<group
					name={'Front Scale'}
					position-z={-getPos(table.z, scale.z)}
				>
					<mesh
						visible={topper == 'inset' ? true : false}
						position-z={-getEdge(table.z, borderScale)}
						scale-x={getScaleWithOffset(
							table.x,
							borderWidth,
							borderScale,
							scale.x
						)}
						scale-z={borderScale}
						material={timberMaterial}
						geometry={nodes.TopSetF2.geometry}
					></mesh>
					<mesh
						position-z={-getEdge(table.z, borderScale)}
						scale-x={getScaleWithOffset(
							table.x,
							borderWidth,
							borderScale,
							scale.x
						)}
						scale-z={borderScale}
						visible={topper == 'cover' ? true : false}
						material={timberMaterial}
						geometry={nodes.TopCovF2.geometry}
					/>
					<mesh
						position-z={getPosOffset(borderWidth, borderScale)}
						scale-x={getScaleWithOffset(
							table.x,
							borderWidth,
							borderScale,
							scale.x
						)}
						material={timberMaterial}
						geometry={nodes.InnerF.geometry}
					/>
					<mesh
						scale-x={getScaleWithOffset(
							table.x,
							LegFL.x,
							1,
							scale.x
						)}
						material={timberMaterial}
						geometry={nodes.RailF.geometry}
					/>
				</group>
			</group>
			<group name={'Back'}>
				<group
					name={'Back Scale'}
					position-z={getPos(table.z, scale.z)}
				>
					<mesh
						visible={topper == 'inset' ? true : false}
						scale-x={getScaleWithOffset(
							table.x,
							borderWidth,
							borderScale,
							scale.x
						)}
						position-z={getEdge(table.z, borderScale)}
						scale-z={borderScale}
						material={timberMaterial}
						geometry={nodes.TopSetB2.geometry}
					/>
					<mesh
						visible={topper == 'cover' ? true : false}
						position-z={getEdge(table.z, borderScale)}
						scale-z={borderScale}
						scale-x={getScaleWithOffset(
							table.x,
							borderWidth,
							borderScale,
							scale.x
						)}
						material={timberMaterial}
						geometry={nodes.TopCovB2.geometry}
					/>
					<mesh
						scale-x={getScaleWithOffset(
							table.x,
							borderWidth,
							borderScale,
							scale.x
						)}
						position-z={-getPosOffset(borderWidth, borderScale)}
						material={timberMaterial}
						geometry={nodes.InnerB.geometry}
					/>
					<mesh
						scale-x={getScaleWithOffset(
							table.x,
							LegFL.x,
							1,
							scale.x
						)}
						material={timberMaterial}
						geometry={nodes.RailB.geometry}
					/>
				</group>
			</group>
			<group name={'Right'}>
				<group
					name={'Right Scale'}
					position-x={-getPos(table.x, scale.x)}
				>
					<mesh
						visible={topper == 'inset' ? true : false}
						position-x={-getEdge(table.x, borderScale)}
						scale-x={borderScale}
						scale-z={getScaleWithOffset(
							table.z,
							borderWidth,
							borderScale,
							scale.z
						)}
						material={timberMaterial}
						geometry={nodes.TopSetR2.geometry}
					/>
					<mesh
						position-x={getPosOffset(borderWidth, borderScale)}
						scale-z={getScaleWithOffset(
							table.z,
							borderWidth,
							borderScale,
							scale.z
						)}
						material={timberMaterial}
						geometry={nodes.InnerR.geometry}
					/>
					<mesh
						visible={topper == 'cover' ? true : false}
						position-x={-getEdge(table.x, borderScale)}
						scale-x={borderScale}
						scale-z={getScaleWithOffset(
							table.z,
							borderWidth,
							borderScale,
							scale.z
						)}
						material={timberMaterial}
						geometry={nodes.TopCovR2.geometry}
					/>
					<mesh
						scale-z={getScaleWithOffset(
							table.z,
							LegFL.z,
							1,
							scale.z
						)}
						material={timberMaterial}
						geometry={nodes.RailR.geometry}
					/>
				</group>
			</group>
			<group name={'Left'}>
				<group
					name={'Left Scale'}
					position-x={getPos(table.x, scale.x)}
				>
					<mesh
						visible={topper == 'inset' ? true : false}
						position-x={getEdge(table.x, borderScale)}
						scale-x={borderScale}
						scale-z={getScaleWithOffset(
							table.z,
							borderWidth,
							borderScale,
							scale.z
						)}
						material={timberMaterial}
						geometry={nodes.TopSetL2.geometry}
					/>
					<mesh
						position-x={-getPosOffset(borderWidth, borderScale)}
						scale-z={getScaleWithOffset(
							table.z,
							borderWidth,
							borderScale,
							scale.z
						)}
						material={timberMaterial}
						geometry={nodes.InnerL.geometry}
					/>
					<mesh
						visible={topper == 'cover' ? true : false}
						position-x={getEdge(table.x, borderScale)}
						scale-x={borderScale}
						scale-z={getScaleWithOffset(
							table.z,
							borderWidth,
							borderScale,
							scale.z
						)}
						material={timberMaterial}
						geometry={nodes.TopCovL2.geometry}
					/>
					<mesh
						scale-z={getScaleWithOffset(
							table.z,
							LegFL.z,
							1,
							scale.z
						)}
						material={timberMaterial}
						geometry={nodes.RailL.geometry}
					/>
				</group>
			</group>
			<group name={'Overall Scale'}>
				<group
					name={'coverTopper'}
					visible={cover && topper == 'cover' ? true : false}
					material={timberMaterial}
					onClick={() => setCover(!cover)}
					scale-x={scale.x}
					scale-z={scale.z}
				>
					<mesh
						material={timberMaterial}
						geometry={nodes.CoverR.geometry}
					/>
					<mesh
						material={timberMaterial}
						geometry={nodes.CoverML.geometry}
					/>
					<mesh
						material={timberMaterial}
						geometry={nodes.CoverMR.geometry}
					/>
					<mesh
						material={timberMaterial}
						geometry={nodes.CoverL.geometry}
					/>
					<group name={'twoPieceCover'}>
						<mesh
							material={timberMaterial}
							geometry={nodes.CoverFillL.geometry}
						/>
						<mesh
							material={timberMaterial}
							geometry={nodes.CoverFillR.geometry}
						/>
					</group>
					<group name={'threePieceCover'}>
						<mesh
							material={timberMaterial}
							geometry={nodes.CoverFillC.geometry}
						/>
					</group>
				</group>
				<group
					name={'insetTopper'}
					visible={cover && topper == 'inset' ? true : false}
					scale-x={getScaleWithOffset(
						table.x,
						borderWidth,
						borderScale,
						scale.x
					)}
					scale-z={getScaleWithOffset(
						table.z,
						borderWidth,
						borderScale,
						scale.z
					)}
				>
					<mesh
						visible={table.x * scale.x > 1450 ? false : true}
						material={timberMaterial}
						geometry={nodes.InsetTopFill.geometry}
					/>
					<mesh
						material={timberMaterial}
						geometry={nodes.InsetTopR.geometry}
					/>
					<mesh
						material={timberMaterial}
						geometry={nodes.InsetTopL.geometry}
					/>
				</group>

				<mesh
					ref={baseBoardRef}
					// scale-x={scale.x}
					// scale-z={scale.z}
					material={matMaterial}
					geometry={nodes.BaseBoard.geometry}
				>
					{/* <meshStandardMaterial
						color={matColour}
						map={colourMap}
						// displacementMap={displacementMap}
						normalMap={normalMap}
						roughnessMap={roughnessMap}
					/> */}
				</mesh>
			</group>
			<group name={'Corners'}>
				<group
					name={'BackLeftCorner'}
					position-z={getPos(table.z, scale.z)}
					position-x={getPos(table.x, scale.x)}
				>
					<group
						name="topPiecesBR"
						scale-x={borderScale}
						scale-z={borderScale}
						position-x={getEdge(table.x, borderScale)}
						position-z={getEdge(table.z, borderScale)}
					>
						<mesh
							visible={topper == 'inset' ? true : false}
							material={timberMaterial}
							geometry={nodes.TopSetL1.geometry}
						/>
						<mesh
							visible={topper == 'inset' ? true : false}
							material={timberMaterial}
							geometry={nodes.TopSetB3.geometry}
						/>
						<mesh
							visible={topper == 'cover' ? true : false}
							material={timberMaterial}
							geometry={nodes.TopCovB3.geometry}
						/>
						<mesh
							visible={topper == 'cover' ? true : false}
							material={timberMaterial}
							geometry={nodes.TopCovL1.geometry}
						/>
					</group>
					<mesh
						material={timberMaterial}
						geometry={nodes.BLLegBlock.geometry}
					/>
					<mesh
						position-z={-getPosOffset(borderWidth / 2, borderScale)}
						position-y={topper == 'cover' ? -9 : 0}
						position-x={-getPosOffset(borderWidth, borderScale)}
						visible={cups}
						material={cupMaterial}
						geometry={nodes.CupBL.geometry}
					/>
					<mesh
						position-x={-getPosOffset(borderWidth / 2, borderScale)}
						position-z={-getPosOffset(borderWidth, borderScale)}
						position-y={topper == 'cover' ? -9 : 0}
						visible={cups}
						material={cupMaterial}
						geometry={nodes.CupLB.geometry}
					/>

					<mesh
						visible={legs == 'Timber' ? true : false}
						material={timberMaterial}
						geometry={nodes.LegBL.geometry}
					/>

					<mesh
						visible={legs == 'Steel' ? true : false}
						material={legMaterial}
						geometry={nodes.SteelLegBL.geometry}
					/>
				</group>
				<group
					name={'BackRightCorner'}
					position-z={getPos(table.z, scale.z)}
					position-x={-getPos(table.x, scale.x)}
				>
					<group
						name="topPiecesBR"
						scale-x={borderScale}
						scale-z={borderScale}
						position-x={-getEdge(table.x, borderScale)}
						position-z={getEdge(table.z, borderScale)}
					>
						<mesh
							visible={topper == 'cover' ? true : false}
							material={timberMaterial}
							geometry={nodes.TopCovR3.geometry}
						/>
						<mesh
							visible={topper == 'inset' ? true : false}
							material={timberMaterial}
							geometry={nodes.TopSetR3.geometry}
						/>

						<mesh
							visible={topper == 'inset' ? true : false}
							material={timberMaterial}
							geometry={nodes.TopSetB1.geometry}
						/>
						<mesh
							visible={topper == 'cover' ? true : false}
							material={timberMaterial}
							geometry={nodes.TopCovB1.geometry}
						/>
					</group>

					<mesh
						material={timberMaterial}
						geometry={nodes.BRLegBlock.geometry}
					/>
					<mesh
						position-z={-getPosOffset(borderWidth / 2, borderScale)}
						position-x={getPosOffset(borderWidth, borderScale)}
						position-y={topper == 'cover' ? -9 : 0}
						visible={cups}
						material={cupMaterial}
						geometry={nodes.CupBR.geometry}
					/>
					<mesh
						position-x={getPosOffset(borderWidth / 2, borderScale)}
						position-z={-getPosOffset(borderWidth, borderScale)}
						position-y={topper == 'cover' ? -9 : 0}
						visible={cups}
						material={cupMaterial}
						geometry={nodes.CupRB.geometry}
					/>
					<mesh
						visible={legs == 'Timber' ? true : false}
						material={timberMaterial}
						geometry={nodes.LegBR.geometry}
					/>
					<mesh
						visible={legs == 'Steel' ? true : false}
						material={legMaterial}
						geometry={nodes.SteelLegBR.geometry}
					/>
				</group>
				<group
					name={'FrontLeftCorner'}
					position-z={-getPos(table.z, scale.z)}
					position-x={getPos(table.x, scale.x)}
				>
					{' '}
					<group
						name="topPiecesFL"
						scale-x={borderScale}
						scale-z={borderScale}
						position-x={getEdge(table.x, borderScale)}
						position-z={-getEdge(table.z, borderScale)}
					>
						<mesh
							visible={topper == 'inset' ? true : false}
							material={timberMaterial}
							geometry={nodes.TopSetF1.geometry}
						/>
						<mesh
							visible={topper == 'inset' ? true : false}
							material={timberMaterial}
							geometry={nodes.TopSetL3.geometry}
						/>
						<mesh
							visible={topper == 'cover' ? true : false}
							material={timberMaterial}
							geometry={nodes.TopCovF1.geometry}
						/>
						<mesh
							visible={topper == 'cover' ? true : false}
							material={timberMaterial}
							geometry={nodes.TopCovL3.geometry}
						/>
					</group>
					<mesh
						material={timberMaterial}
						geometry={nodes.FLLegBlock.geometry}
					/>
					<mesh
						position-x={-getPosOffset(borderWidth / 2, borderScale)}
						position-z={getPosOffset(borderWidth, borderScale)}
						position-y={topper == 'cover' ? -9 : 0}
						visible={cups}
						material={cupMaterial}
						geometry={nodes.CupLF.geometry}
					/>
					<mesh
						position-z={getPosOffset(borderWidth / 2, borderScale)}
						position-x={-getPosOffset(borderWidth, borderScale)}
						position-y={topper == 'cover' ? -9 : 0}
						visible={cups}
						material={cupMaterial}
						geometry={nodes.CupFL.geometry}
					/>
					<mesh
						visible={legs == 'Timber' ? true : false}
						material={timberMaterial}
						geometry={nodes.LegFL.geometry}
					/>
					<mesh
						visible={legs == 'Steel' ? true : false}
						material={legMaterial}
						geometry={nodes.SteelLegFL.geometry}
					/>
				</group>
				<group
					name={'FrontRightCorner'}
					name={'legFR'}
					position-z={-getPos(table.z, scale.z)}
					position-x={-getPos(table.x, scale.x)}
				>
					<group
						name="topPiecesBR"
						scale-x={borderScale}
						scale-z={borderScale}
						position-x={-getEdge(table.x, borderScale)}
						position-z={-getEdge(table.z, borderScale)}
					>
						<mesh
							visible={topper == 'cover' ? true : false}
							material={timberMaterial}
							geometry={nodes.TopCovR1.geometry}
						/>
						<mesh
							visible={topper == 'cover' ? true : false}
							material={timberMaterial}
							geometry={nodes.TopCovF3.geometry}
							material-color={snap.modelFactors.timberColour}
						/>
						<mesh
							visible={topper == 'inset' ? true : false}
							material={timberMaterial}
							geometry={nodes.TopSetF3.geometry}
						/>
						<mesh
							visible={topper == 'inset' ? true : false}
							material={timberMaterial}
							geometry={nodes.TopSetR1.geometry}
						/>
					</group>

					<mesh
						material={timberMaterial}
						geometry={nodes.FRLegBlock.geometry}
					/>
					<mesh
						position-z={getPosOffset(borderWidth / 2, borderScale)}
						position-x={getPosOffset(borderWidth, borderScale)}
						position-y={topper == 'cover' ? -9 : 0}
						visible={cups}
						material={cupMaterial}
						geometry={nodes.CupFR.geometry}
					/>
					<mesh
						position-x={getPosOffset(borderWidth / 2, borderScale)}
						position-z={getPosOffset(borderWidth, borderScale)}
						position-y={topper == 'cover' ? -9 : 0}
						visible={cups}
						material={cupMaterial}
						geometry={nodes.CupRF.geometry}
					/>
					<mesh
						visible={legs == 'Timber' ? true : false}
						material={timberMaterial}
						geometry={nodes.LegFR.geometry}
					/>
					<mesh
						visible={legs == 'Steel' ? true : false}
						material={legMaterial}
						geometry={nodes.SteelLegFR.geometry}
					/>
				</group>
			</group>
		</group>
	);
}
